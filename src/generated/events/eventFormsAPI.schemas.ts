/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Event Forms API
 * OpenAPI spec version: 1.0.0
 */
export interface EventTypeConfig {
  eventType?: string;
  displayName?: string;
  sections?: SectionConfig[];
}

export type SectionConfigSectionId = typeof SectionConfigSectionId[keyof typeof SectionConfigSectionId];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SectionConfigSectionId = {
  persons: 'persons',
  vehicles: 'vehicles',
  products: 'products',
  evidence: 'evidence',
} as const;

export interface SectionConfig {
  sectionId?: SectionConfigSectionId;
  displayName?: string;
  required?: boolean;
  /** @minimum 0 */
  minimumEntries?: number;
}

export interface CreateEventRequest {
  eventType: string;
  organizationId: string;
  siteId: string;
}

export type EventResponseAllOf = {
  validation?: ValidationSummary;
};

export type EventResponse = Event & EventResponseAllOf;

export type EventMetadataPriority = typeof EventMetadataPriority[keyof typeof EventMetadataPriority];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventMetadataPriority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical',
} as const;

export interface EventMetadata {
  /** @minLength 1 */
  title: string;
  description?: string;
  priority: EventMetadataPriority;
  occurredAt: string;
}

export type EventSectionsEvidenceItem = { [key: string]: unknown };

export interface EventSections {
  persons?: PersonInvolved[];
  vehicles?: VehicleInvolved[];
  products?: ProductInvolved[];
  evidence?: EventSectionsEvidenceItem[];
}

export type BaseEventStatus = typeof BaseEventStatus[keyof typeof BaseEventStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BaseEventStatus = {
  draft: 'draft',
  published: 'published',
} as const;

export interface BaseEvent {
  id: string;
  eventType: string;
  organizationId: string;
  siteId: string;
  status: BaseEventStatus;
  metadata: EventMetadata;
}

export type ShopliftingEventAllOfEventType = typeof ShopliftingEventAllOfEventType[keyof typeof ShopliftingEventAllOfEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ShopliftingEventAllOfEventType = {
  shoplifting: 'shoplifting',
} as const;

export type ShopliftingEventAllOfSections = {
  /** @minItems 1 */
  persons: PersonInvolved[];
  /** @minItems 1 */
  products: ProductInvolved[];
  vehicles?: VehicleInvolved[];
};

export type ShopliftingEventAllOf = {
  eventType?: ShopliftingEventAllOfEventType;
  sections: ShopliftingEventAllOfSections;
};

export type ShopliftingEventEventType = typeof ShopliftingEventEventType[keyof typeof ShopliftingEventEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ShopliftingEventEventType = {
  shoplifting: 'shoplifting',
} as const;

export type ShopliftingEvent = BaseEvent & ShopliftingEventAllOf & {
  eventType: ShopliftingEventEventType;
};

export type AccidentEventAllOfEventType = typeof AccidentEventAllOfEventType[keyof typeof AccidentEventAllOfEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccidentEventAllOfEventType = {
  accident: 'accident',
} as const;

export type AccidentEventAllOfSections = {
  /** @minItems 1 */
  persons: PersonInvolved[];
  vehicles?: VehicleInvolved[];
  products?: ProductInvolved[];
};

export type AccidentEventAllOf = {
  eventType?: AccidentEventAllOfEventType;
  sections: AccidentEventAllOfSections;
};

export type AccidentEventEventType = typeof AccidentEventEventType[keyof typeof AccidentEventEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccidentEventEventType = {
  accident: 'accident',
} as const;

export type AccidentEvent = BaseEvent & AccidentEventAllOf & {
  eventType: AccidentEventEventType;
};

export type VandalismEventAllOfEventType = typeof VandalismEventAllOfEventType[keyof typeof VandalismEventAllOfEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VandalismEventAllOfEventType = {
  vandalism: 'vandalism',
} as const;

export type VandalismEventAllOfSectionsEvidenceItem = { [key: string]: unknown };

export type VandalismEventAllOfSections = {
  persons?: PersonInvolved[];
  vehicles?: VehicleInvolved[];
  products?: ProductInvolved[];
  /** @minItems 1 */
  evidence: VandalismEventAllOfSectionsEvidenceItem[];
};

export type VandalismEventAllOf = {
  eventType?: VandalismEventAllOfEventType;
  sections: VandalismEventAllOfSections;
};

export type VandalismEventEventType = typeof VandalismEventEventType[keyof typeof VandalismEventEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VandalismEventEventType = {
  vandalism: 'vandalism',
} as const;

export type VandalismEvent = BaseEvent & VandalismEventAllOf & {
  eventType: VandalismEventEventType;
};

export type Event = ShopliftingEvent | AccidentEvent | VandalismEvent;

export type PersonInvolvedRole = typeof PersonInvolvedRole[keyof typeof PersonInvolvedRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PersonInvolvedRole = {
  suspect: 'suspect',
  victim: 'victim',
  witness: 'witness',
  employee: 'employee',
} as const;

export interface PersonInvolved {
  id: string;
  /** @minLength 1 */
  name: string;
  role: PersonInvolvedRole;
  /**
   * @minimum 0
   * @maximum 150
   */
  age?: number;
}

export interface VehicleInvolved {
  id: string;
  /** @minLength 1 */
  make: string;
  /** @minLength 1 */
  model: string;
  licensePlate?: string;
}

export interface ProductInvolved {
  id: string;
  /** @minLength 1 */
  name: string;
  sku?: string;
  /** @minimum 1 */
  quantity: number;
  /** @minimum 0 */
  unitValue: number;
}

export interface ValidationResponse {
  valid?: boolean;
  canPublish?: boolean;
  issues?: ValidationIssue[];
}

export interface ValidationSummary {
  isValid?: boolean;
  canPublish?: boolean;
  errorCount?: number;
}

export type ValidationIssueSeverity = typeof ValidationIssueSeverity[keyof typeof ValidationIssueSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationIssueSeverity = {
  error: 'error',
  warning: 'warning',
} as const;

export interface ValidationIssue {
  field?: string;
  message?: string;
  severity?: ValidationIssueSeverity;
}

export interface CreatePersonRequest {
  name: string;
  role: PersonInvolvedRole;
  /**
   * @minimum 0
   * @maximum 150
   */
  age?: number;
}

export interface UpdatePersonRequest {
  name?: string;
  role?: PersonInvolvedRole;
  /**
   * @minimum 0
   * @maximum 150
   */
  age?: number;
}

export interface CreateVehicleRequest {
  make: string;
  model: string;
  licensePlate?: string;
}

export interface UpdateVehicleRequest {
  make?: string;
  model?: string;
  licensePlate?: string;
}

export interface CreateProductRequest {
  name: string;
  sku: string;
  /** @minimum 1 */
  quantity?: number;
  /** @minimum 0 */
  unitValue?: number;
}

export interface UpdateProductRequest {
  name?: string;
  sku?: string;
  /** @minimum 1 */
  quantity?: number;
  /** @minimum 0 */
  unitValue?: number;
}

export type PatchEventsEventIdBody = { [key: string]: unknown };

