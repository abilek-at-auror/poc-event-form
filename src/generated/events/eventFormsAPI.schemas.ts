/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Event Forms API
 * OpenAPI spec version: 1.0.0
 */
export interface EventTypeConfig {
  eventType?: string;
  displayName?: string;
  sections?: SectionConfig[];
}

export type SectionConfigSectionId = typeof SectionConfigSectionId[keyof typeof SectionConfigSectionId];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SectionConfigSectionId = {
  persons: 'persons',
  vehicles: 'vehicles',
  products: 'products',
  evidence: 'evidence',
} as const;

export interface SectionConfig {
  sectionId?: SectionConfigSectionId;
  displayName?: string;
  required?: boolean;
  /** @minimum 0 */
  minimumEntries?: number;
}

export interface CreateEventRequest {
  eventType: string;
  organizationId: string;
  siteId: string;
}

export type EventResponseStatus = typeof EventResponseStatus[keyof typeof EventResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventResponseStatus = {
  draft: 'draft',
  published: 'published',
} as const;

export interface EventResponse {
  id?: string;
  eventType?: string;
  organizationId?: string;
  siteId?: string;
  status?: EventResponseStatus;
  metadata?: EventMetadata;
  sections?: EventSections;
  validation?: ValidationSummary;
}

export type EventMetadataPriority = typeof EventMetadataPriority[keyof typeof EventMetadataPriority];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventMetadataPriority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  critical: 'critical',
} as const;

export interface EventMetadata {
  title?: string;
  description?: string;
  priority?: EventMetadataPriority;
  occurredAt?: string;
}

export interface EventSections {
  persons?: PersonInvolved[];
  vehicles?: VehicleInvolved[];
  products?: ProductInvolved[];
}

export type PersonInvolvedRole = typeof PersonInvolvedRole[keyof typeof PersonInvolvedRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PersonInvolvedRole = {
  suspect: 'suspect',
  victim: 'victim',
  witness: 'witness',
  employee: 'employee',
} as const;

export interface PersonInvolved {
  id?: string;
  name?: string;
  role?: PersonInvolvedRole;
  age?: number;
}

export interface VehicleInvolved {
  id?: string;
  make?: string;
  model?: string;
  licensePlate?: string;
}

export interface ProductInvolved {
  id?: string;
  name?: string;
  sku?: string;
  quantity?: number;
  unitValue?: number;
}

export interface ValidationResponse {
  valid?: boolean;
  canPublish?: boolean;
  issues?: ValidationIssue[];
}

export interface ValidationSummary {
  isValid?: boolean;
  canPublish?: boolean;
  errorCount?: number;
}

export type ValidationIssueSeverity = typeof ValidationIssueSeverity[keyof typeof ValidationIssueSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationIssueSeverity = {
  error: 'error',
  warning: 'warning',
} as const;

export interface ValidationIssue {
  field?: string;
  message?: string;
  severity?: ValidationIssueSeverity;
}

export interface CreatePersonRequest {
  name: string;
  role: PersonInvolvedRole;
  /**
   * @minimum 0
   * @maximum 150
   */
  age?: number;
}

export interface UpdatePersonRequest {
  name?: string;
  role?: PersonInvolvedRole;
  /**
   * @minimum 0
   * @maximum 150
   */
  age?: number;
}

export interface CreateVehicleRequest {
  make: string;
  model: string;
  licensePlate?: string;
}

export interface UpdateVehicleRequest {
  make?: string;
  model?: string;
  licensePlate?: string;
}

export interface CreateProductRequest {
  name: string;
  sku: string;
  /** @minimum 1 */
  quantity?: number;
  /** @minimum 0 */
  unitValue?: number;
}

export interface UpdateProductRequest {
  name?: string;
  sku?: string;
  /** @minimum 1 */
  quantity?: number;
  /** @minimum 0 */
  unitValue?: number;
}

export type PatchEventsEventIdBody = { [key: string]: unknown };

