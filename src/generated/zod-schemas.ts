/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Event Forms API
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';

/**
 * @summary Get configuration for specific event type
 */
export const getEventTypesEventTypeConfigParams = zod.object({
  "eventType": zod.string()
})

export const getEventTypesEventTypeConfigResponseSectionsItemMinimumEntriesMin = 0;


export const getEventTypesEventTypeConfigResponse = zod.object({
  "eventType": zod.string().optional(),
  "displayName": zod.string().optional(),
  "sections": zod.array(zod.object({
  "sectionId": zod.enum(['persons', 'vehicles', 'products', 'evidence']).optional(),
  "displayName": zod.string().optional(),
  "required": zod.boolean().optional(),
  "minimumEntries": zod.number().min(getEventTypesEventTypeConfigResponseSectionsItemMinimumEntriesMin).optional()
})).optional()
})


/**
 * @summary Create new event (draft)
 */
export const postEventsBody = zod.object({
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string()
})


/**
 * @summary Get event by ID
 */
export const getEventsEventIdParams = zod.object({
  "eventId": zod.string()
})

export const getEventsEventIdResponseSectionsPersonsItemAgeMin = 0;

export const getEventsEventIdResponseSectionsPersonsItemAgeMax = 150;
export const getEventsEventIdResponseSectionsProductsItemUnitValueMin = 0;
export const getEventsEventIdResponseSectionsPersonsItemAgeMinOne = 0;

export const getEventsEventIdResponseSectionsPersonsItemAgeMaxOne = 150;
export const getEventsEventIdResponseSectionsProductsItemUnitValueMinOne = 0;
export const getEventsEventIdResponseSectionsPersonsItemAgeMinTwo = 0;

export const getEventsEventIdResponseSectionsPersonsItemAgeMaxTwo = 150;
export const getEventsEventIdResponseSectionsProductsItemUnitValueMinTwo = 0;


export const getEventsEventIdResponse = zod.union([zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['shoplifting']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(getEventsEventIdResponseSectionsPersonsItemAgeMin).max(getEventsEventIdResponseSectionsPersonsItemAgeMax).optional()
})).min(1),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(getEventsEventIdResponseSectionsProductsItemUnitValueMin)
})).min(1),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional()
})
})),zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['accident']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(getEventsEventIdResponseSectionsPersonsItemAgeMinOne).max(getEventsEventIdResponseSectionsPersonsItemAgeMaxOne).optional()
})).min(1),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional(),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(getEventsEventIdResponseSectionsProductsItemUnitValueMinOne)
})).optional()
})
})),zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['vandalism']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(getEventsEventIdResponseSectionsPersonsItemAgeMinTwo).max(getEventsEventIdResponseSectionsPersonsItemAgeMaxTwo).optional()
})).optional(),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional(),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(getEventsEventIdResponseSectionsProductsItemUnitValueMinTwo)
})).optional(),
  "evidence": zod.array(zod.record(zod.string(), zod.any())).min(1)
})
}))]).and(zod.object({
  "validation": zod.object({
  "isValid": zod.boolean().optional(),
  "canPublish": zod.boolean().optional(),
  "errorCount": zod.number().optional()
}).optional()
}))


/**
 * @summary Update event fields atomically
 */
export const patchEventsEventIdParams = zod.object({
  "eventId": zod.string()
})

export const patchEventsEventIdBody = zod.record(zod.string(), zod.any())

export const patchEventsEventIdResponseSectionsPersonsItemAgeMin = 0;

export const patchEventsEventIdResponseSectionsPersonsItemAgeMax = 150;
export const patchEventsEventIdResponseSectionsProductsItemUnitValueMin = 0;
export const patchEventsEventIdResponseSectionsPersonsItemAgeMinOne = 0;

export const patchEventsEventIdResponseSectionsPersonsItemAgeMaxOne = 150;
export const patchEventsEventIdResponseSectionsProductsItemUnitValueMinOne = 0;
export const patchEventsEventIdResponseSectionsPersonsItemAgeMinTwo = 0;

export const patchEventsEventIdResponseSectionsPersonsItemAgeMaxTwo = 150;
export const patchEventsEventIdResponseSectionsProductsItemUnitValueMinTwo = 0;


export const patchEventsEventIdResponse = zod.union([zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['shoplifting']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(patchEventsEventIdResponseSectionsPersonsItemAgeMin).max(patchEventsEventIdResponseSectionsPersonsItemAgeMax).optional()
})).min(1),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(patchEventsEventIdResponseSectionsProductsItemUnitValueMin)
})).min(1),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional()
})
})),zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['accident']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(patchEventsEventIdResponseSectionsPersonsItemAgeMinOne).max(patchEventsEventIdResponseSectionsPersonsItemAgeMaxOne).optional()
})).min(1),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional(),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(patchEventsEventIdResponseSectionsProductsItemUnitValueMinOne)
})).optional()
})
})),zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['vandalism']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(patchEventsEventIdResponseSectionsPersonsItemAgeMinTwo).max(patchEventsEventIdResponseSectionsPersonsItemAgeMaxTwo).optional()
})).optional(),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional(),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(patchEventsEventIdResponseSectionsProductsItemUnitValueMinTwo)
})).optional(),
  "evidence": zod.array(zod.record(zod.string(), zod.any())).min(1)
})
}))]).and(zod.object({
  "validation": zod.object({
  "isValid": zod.boolean().optional(),
  "canPublish": zod.boolean().optional(),
  "errorCount": zod.number().optional()
}).optional()
}))


/**
 * @summary Publish event (validate and finalize)
 */
export const postEventsEventIdPublishParams = zod.object({
  "eventId": zod.string()
})

export const postEventsEventIdPublishResponseSectionsPersonsItemAgeMin = 0;

export const postEventsEventIdPublishResponseSectionsPersonsItemAgeMax = 150;
export const postEventsEventIdPublishResponseSectionsProductsItemUnitValueMin = 0;
export const postEventsEventIdPublishResponseSectionsPersonsItemAgeMinOne = 0;

export const postEventsEventIdPublishResponseSectionsPersonsItemAgeMaxOne = 150;
export const postEventsEventIdPublishResponseSectionsProductsItemUnitValueMinOne = 0;
export const postEventsEventIdPublishResponseSectionsPersonsItemAgeMinTwo = 0;

export const postEventsEventIdPublishResponseSectionsPersonsItemAgeMaxTwo = 150;
export const postEventsEventIdPublishResponseSectionsProductsItemUnitValueMinTwo = 0;


export const postEventsEventIdPublishResponse = zod.union([zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['shoplifting']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(postEventsEventIdPublishResponseSectionsPersonsItemAgeMin).max(postEventsEventIdPublishResponseSectionsPersonsItemAgeMax).optional()
})).min(1),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(postEventsEventIdPublishResponseSectionsProductsItemUnitValueMin)
})).min(1),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional()
})
})),zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['accident']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(postEventsEventIdPublishResponseSectionsPersonsItemAgeMinOne).max(postEventsEventIdPublishResponseSectionsPersonsItemAgeMaxOne).optional()
})).min(1),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional(),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(postEventsEventIdPublishResponseSectionsProductsItemUnitValueMinOne)
})).optional()
})
})),zod.object({
  "id": zod.string(),
  "eventType": zod.string(),
  "organizationId": zod.string(),
  "siteId": zod.string(),
  "status": zod.enum(['draft', 'published']),
  "metadata": zod.object({
  "title": zod.string().min(1),
  "description": zod.string().optional(),
  "priority": zod.enum(['low', 'medium', 'high', 'critical']),
  "occurredAt": zod.iso.datetime({})
})
}).and(zod.object({
  "eventType": zod.enum(['vandalism']).optional(),
  "sections": zod.object({
  "persons": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(postEventsEventIdPublishResponseSectionsPersonsItemAgeMinTwo).max(postEventsEventIdPublishResponseSectionsPersonsItemAgeMaxTwo).optional()
})).optional(),
  "vehicles": zod.array(zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})).optional(),
  "products": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(postEventsEventIdPublishResponseSectionsProductsItemUnitValueMinTwo)
})).optional(),
  "evidence": zod.array(zod.record(zod.string(), zod.any())).min(1)
})
}))]).and(zod.object({
  "validation": zod.object({
  "isValid": zod.boolean().optional(),
  "canPublish": zod.boolean().optional(),
  "errorCount": zod.number().optional()
}).optional()
}))


/**
 * @summary Validate event without publishing
 */
export const postEventsEventIdValidateParams = zod.object({
  "eventId": zod.string()
})

export const postEventsEventIdValidateResponse = zod.object({
  "valid": zod.boolean().optional(),
  "canPublish": zod.boolean().optional(),
  "issues": zod.array(zod.object({
  "field": zod.string().optional(),
  "message": zod.string().optional(),
  "severity": zod.enum(['error', 'warning']).optional()
})).optional()
})


/**
 * @summary Get all persons for an event
 */
export const getEventsEventIdPersonsParams = zod.object({
  "eventId": zod.string()
})

export const getEventsEventIdPersonsResponseAgeMin = 0;

export const getEventsEventIdPersonsResponseAgeMax = 150;


export const getEventsEventIdPersonsResponseItem = zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(getEventsEventIdPersonsResponseAgeMin).max(getEventsEventIdPersonsResponseAgeMax).optional()
})
export const getEventsEventIdPersonsResponse = zod.array(getEventsEventIdPersonsResponseItem)


/**
 * @summary Add a new person to an event
 */
export const postEventsEventIdPersonsParams = zod.object({
  "eventId": zod.string()
})

export const postEventsEventIdPersonsBodyAgeMin = 0;

export const postEventsEventIdPersonsBodyAgeMax = 150;


export const postEventsEventIdPersonsBody = zod.object({
  "name": zod.string(),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(postEventsEventIdPersonsBodyAgeMin).max(postEventsEventIdPersonsBodyAgeMax).optional()
})


/**
 * @summary Get a specific person
 */
export const getEventsEventIdPersonsPersonIdParams = zod.object({
  "eventId": zod.string(),
  "personId": zod.string()
})

export const getEventsEventIdPersonsPersonIdResponseAgeMin = 0;

export const getEventsEventIdPersonsPersonIdResponseAgeMax = 150;


export const getEventsEventIdPersonsPersonIdResponse = zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(getEventsEventIdPersonsPersonIdResponseAgeMin).max(getEventsEventIdPersonsPersonIdResponseAgeMax).optional()
})


/**
 * @summary Update a person
 */
export const putEventsEventIdPersonsPersonIdParams = zod.object({
  "eventId": zod.string(),
  "personId": zod.string()
})

export const putEventsEventIdPersonsPersonIdBodyAgeMin = 0;

export const putEventsEventIdPersonsPersonIdBodyAgeMax = 150;


export const putEventsEventIdPersonsPersonIdBody = zod.object({
  "name": zod.string().optional(),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']).optional(),
  "age": zod.number().min(putEventsEventIdPersonsPersonIdBodyAgeMin).max(putEventsEventIdPersonsPersonIdBodyAgeMax).optional()
})

export const putEventsEventIdPersonsPersonIdResponseAgeMin = 0;

export const putEventsEventIdPersonsPersonIdResponseAgeMax = 150;


export const putEventsEventIdPersonsPersonIdResponse = zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "role": zod.enum(['suspect', 'victim', 'witness', 'employee']),
  "age": zod.number().min(putEventsEventIdPersonsPersonIdResponseAgeMin).max(putEventsEventIdPersonsPersonIdResponseAgeMax).optional()
})


/**
 * @summary Delete a person
 */
export const deleteEventsEventIdPersonsPersonIdParams = zod.object({
  "eventId": zod.string(),
  "personId": zod.string()
})


/**
 * @summary Get all vehicles for an event
 */
export const getEventsEventIdVehiclesParams = zod.object({
  "eventId": zod.string()
})

export const getEventsEventIdVehiclesResponseItem = zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})
export const getEventsEventIdVehiclesResponse = zod.array(getEventsEventIdVehiclesResponseItem)


/**
 * @summary Add a new vehicle to an event
 */
export const postEventsEventIdVehiclesParams = zod.object({
  "eventId": zod.string()
})

export const postEventsEventIdVehiclesBody = zod.object({
  "make": zod.string(),
  "model": zod.string(),
  "licensePlate": zod.string().optional()
})


/**
 * @summary Get a specific vehicle
 */
export const getEventsEventIdVehiclesVehicleIdParams = zod.object({
  "eventId": zod.string(),
  "vehicleId": zod.string()
})

export const getEventsEventIdVehiclesVehicleIdResponse = zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})


/**
 * @summary Update a vehicle
 */
export const putEventsEventIdVehiclesVehicleIdParams = zod.object({
  "eventId": zod.string(),
  "vehicleId": zod.string()
})

export const putEventsEventIdVehiclesVehicleIdBody = zod.object({
  "make": zod.string().optional(),
  "model": zod.string().optional(),
  "licensePlate": zod.string().optional()
})

export const putEventsEventIdVehiclesVehicleIdResponse = zod.object({
  "id": zod.string(),
  "make": zod.string().min(1),
  "model": zod.string().min(1),
  "licensePlate": zod.string().optional()
})


/**
 * @summary Delete a vehicle
 */
export const deleteEventsEventIdVehiclesVehicleIdParams = zod.object({
  "eventId": zod.string(),
  "vehicleId": zod.string()
})


/**
 * @summary Get all products for an event
 */
export const getEventsEventIdProductsParams = zod.object({
  "eventId": zod.string()
})

export const getEventsEventIdProductsResponseUnitValueMin = 0;


export const getEventsEventIdProductsResponseItem = zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(getEventsEventIdProductsResponseUnitValueMin)
})
export const getEventsEventIdProductsResponse = zod.array(getEventsEventIdProductsResponseItem)


/**
 * @summary Add a new product to an event
 */
export const postEventsEventIdProductsParams = zod.object({
  "eventId": zod.string()
})

export const postEventsEventIdProductsBodyUnitValueMin = 0;


export const postEventsEventIdProductsBody = zod.object({
  "name": zod.string(),
  "sku": zod.string(),
  "quantity": zod.number().min(1).optional(),
  "unitValue": zod.number().min(postEventsEventIdProductsBodyUnitValueMin).optional()
})


/**
 * @summary Get a specific product
 */
export const getEventsEventIdProductsProductIdParams = zod.object({
  "eventId": zod.string(),
  "productId": zod.string()
})

export const getEventsEventIdProductsProductIdResponseUnitValueMin = 0;


export const getEventsEventIdProductsProductIdResponse = zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(getEventsEventIdProductsProductIdResponseUnitValueMin)
})


/**
 * @summary Update a product
 */
export const putEventsEventIdProductsProductIdParams = zod.object({
  "eventId": zod.string(),
  "productId": zod.string()
})

export const putEventsEventIdProductsProductIdBodyUnitValueMin = 0;


export const putEventsEventIdProductsProductIdBody = zod.object({
  "name": zod.string().optional(),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1).optional(),
  "unitValue": zod.number().min(putEventsEventIdProductsProductIdBodyUnitValueMin).optional()
})

export const putEventsEventIdProductsProductIdResponseUnitValueMin = 0;


export const putEventsEventIdProductsProductIdResponse = zod.object({
  "id": zod.string(),
  "name": zod.string().min(1),
  "sku": zod.string().optional(),
  "quantity": zod.number().min(1),
  "unitValue": zod.number().min(putEventsEventIdProductsProductIdResponseUnitValueMin)
})


/**
 * @summary Delete a product
 */
export const deleteEventsEventIdProductsProductIdParams = zod.object({
  "eventId": zod.string(),
  "productId": zod.string()
})
