/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Event Forms API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateEventRequest,
  EventResponse,
  EventTypeConfig,
  PatchEventsEventIdBody,
  ValidationResponse
} from './eventFormsAPI.schemas';

import { apiClient } from '../../lib/api-client';




/**
 * @summary Get configuration for specific event type
 */
export const getEventTypesEventTypeConfig = (
    eventType: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventTypeConfig>(
      {url: `/event-types/${eventType}/config`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventTypesEventTypeConfigQueryKey = (eventType?: string,) => {
    return [`/event-types/${eventType}/config`] as const;
    }

    
export const getGetEventTypesEventTypeConfigQueryOptions = <TData = Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError = unknown>(eventType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventTypesEventTypeConfigQueryKey(eventType);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>> = ({ signal }) => getEventTypesEventTypeConfig(eventType, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventTypesEventTypeConfigQueryResult = NonNullable<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>>
export type GetEventTypesEventTypeConfigQueryError = unknown


export function useGetEventTypesEventTypeConfig<TData = Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError = unknown>(
 eventType: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>,
          TError,
          Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventTypesEventTypeConfig<TData = Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError = unknown>(
 eventType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>,
          TError,
          Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventTypesEventTypeConfig<TData = Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError = unknown>(
 eventType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get configuration for specific event type
 */

export function useGetEventTypesEventTypeConfig<TData = Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError = unknown>(
 eventType: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventTypesEventTypeConfig>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEventTypesEventTypeConfigQueryOptions(eventType,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create new event (draft)
 */
export const postEvents = (
    createEventRequest: CreateEventRequest,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventResponse>(
      {url: `/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEventRequest, signal
    },
      );
    }
  


export const getPostEventsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEvents>>, TError,{data: CreateEventRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postEvents>>, TError,{data: CreateEventRequest}, TContext> => {

const mutationKey = ['postEvents'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEvents>>, {data: CreateEventRequest}> = (props) => {
          const {data} = props ?? {};

          return  postEvents(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEventsMutationResult = NonNullable<Awaited<ReturnType<typeof postEvents>>>
    export type PostEventsMutationBody = CreateEventRequest
    export type PostEventsMutationError = unknown

    /**
 * @summary Create new event (draft)
 */
export const usePostEvents = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEvents>>, TError,{data: CreateEventRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postEvents>>,
        TError,
        {data: CreateEventRequest},
        TContext
      > => {

      const mutationOptions = getPostEventsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get event by ID
 */
export const getEventsEventId = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventResponse>(
      {url: `/events/${eventId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetEventsEventIdQueryKey = (eventId?: string,) => {
    return [`/events/${eventId}`] as const;
    }

    
export const getGetEventsEventIdQueryOptions = <TData = Awaited<ReturnType<typeof getEventsEventId>>, TError = unknown>(eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventsEventIdQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsEventId>>> = ({ signal }) => getEventsEventId(eventId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetEventsEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsEventId>>>
export type GetEventsEventIdQueryError = unknown


export function useGetEventsEventId<TData = Awaited<ReturnType<typeof getEventsEventId>>, TError = unknown>(
 eventId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsEventId>>,
          TError,
          Awaited<ReturnType<typeof getEventsEventId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsEventId<TData = Awaited<ReturnType<typeof getEventsEventId>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventsEventId>>,
          TError,
          Awaited<ReturnType<typeof getEventsEventId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetEventsEventId<TData = Awaited<ReturnType<typeof getEventsEventId>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get event by ID
 */

export function useGetEventsEventId<TData = Awaited<ReturnType<typeof getEventsEventId>>, TError = unknown>(
 eventId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetEventsEventIdQueryOptions(eventId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update event fields atomically
 */
export const patchEventsEventId = (
    eventId: string,
    patchEventsEventIdBody: PatchEventsEventIdBody,
 ) => {
      
      
      return apiClient<EventResponse>(
      {url: `/events/${eventId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchEventsEventIdBody
    },
      );
    }
  


export const getPatchEventsEventIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchEventsEventId>>, TError,{eventId: string;data: PatchEventsEventIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof patchEventsEventId>>, TError,{eventId: string;data: PatchEventsEventIdBody}, TContext> => {

const mutationKey = ['patchEventsEventId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchEventsEventId>>, {eventId: string;data: PatchEventsEventIdBody}> = (props) => {
          const {eventId,data} = props ?? {};

          return  patchEventsEventId(eventId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchEventsEventIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchEventsEventId>>>
    export type PatchEventsEventIdMutationBody = PatchEventsEventIdBody
    export type PatchEventsEventIdMutationError = unknown

    /**
 * @summary Update event fields atomically
 */
export const usePatchEventsEventId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchEventsEventId>>, TError,{eventId: string;data: PatchEventsEventIdBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchEventsEventId>>,
        TError,
        {eventId: string;data: PatchEventsEventIdBody},
        TContext
      > => {

      const mutationOptions = getPatchEventsEventIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Publish event (validate and finalize)
 */
export const postEventsEventIdPublish = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<EventResponse>(
      {url: `/events/${eventId}/publish`, method: 'POST', signal
    },
      );
    }
  


export const getPostEventsEventIdPublishMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEventsEventIdPublish>>, TError,{eventId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postEventsEventIdPublish>>, TError,{eventId: string}, TContext> => {

const mutationKey = ['postEventsEventIdPublish'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEventsEventIdPublish>>, {eventId: string}> = (props) => {
          const {eventId} = props ?? {};

          return  postEventsEventIdPublish(eventId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEventsEventIdPublishMutationResult = NonNullable<Awaited<ReturnType<typeof postEventsEventIdPublish>>>
    
    export type PostEventsEventIdPublishMutationError = unknown

    /**
 * @summary Publish event (validate and finalize)
 */
export const usePostEventsEventIdPublish = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEventsEventIdPublish>>, TError,{eventId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postEventsEventIdPublish>>,
        TError,
        {eventId: string},
        TContext
      > => {

      const mutationOptions = getPostEventsEventIdPublishMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Validate event without publishing
 */
export const postEventsEventIdValidate = (
    eventId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClient<ValidationResponse>(
      {url: `/events/${eventId}/validate`, method: 'POST', signal
    },
      );
    }
  


export const getPostEventsEventIdValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEventsEventIdValidate>>, TError,{eventId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postEventsEventIdValidate>>, TError,{eventId: string}, TContext> => {

const mutationKey = ['postEventsEventIdValidate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEventsEventIdValidate>>, {eventId: string}> = (props) => {
          const {eventId} = props ?? {};

          return  postEventsEventIdValidate(eventId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostEventsEventIdValidateMutationResult = NonNullable<Awaited<ReturnType<typeof postEventsEventIdValidate>>>
    
    export type PostEventsEventIdValidateMutationError = unknown

    /**
 * @summary Validate event without publishing
 */
export const usePostEventsEventIdValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postEventsEventIdValidate>>, TError,{eventId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postEventsEventIdValidate>>,
        TError,
        {eventId: string},
        TContext
      > => {

      const mutationOptions = getPostEventsEventIdValidateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
