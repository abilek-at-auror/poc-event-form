/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Event Forms API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  EventResponse,
  EventTypeConfig,
  ValidationResponse
} from './eventFormsAPI.schemas';


export const getGetEventTypesEventTypeConfigResponseMock = (overrideResponse: Partial< EventTypeConfig > = {}): EventTypeConfig => ({eventType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), sections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({sectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(['persons','vehicles','products','evidence'] as const), undefined]), displayName: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), required: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), minimumEntries: faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined, multipleOf: undefined}), undefined])})), undefined]), ...overrideResponse})

export const getPostEventsResponseMock = (overrideResponse: Partial< EventResponse > = {}): EventResponse => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), eventType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), organizationId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), siteId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['draft','published'] as const), undefined]), metadata: faker.helpers.arrayElement([{title: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement(['low','medium','high','critical'] as const), undefined]), occurredAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), sections: faker.helpers.arrayElement([{persons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['suspect','victim','witness','employee'] as const), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])})), undefined]), vehicles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), make: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), licensePlate: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), products: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), sku: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), unitValue: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined])}, undefined]), validation: faker.helpers.arrayElement([{isValid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), canPublish: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), errorCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getGetEventsEventIdResponseMock = (overrideResponse: Partial< EventResponse > = {}): EventResponse => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), eventType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), organizationId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), siteId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['draft','published'] as const), undefined]), metadata: faker.helpers.arrayElement([{title: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement(['low','medium','high','critical'] as const), undefined]), occurredAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), sections: faker.helpers.arrayElement([{persons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['suspect','victim','witness','employee'] as const), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])})), undefined]), vehicles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), make: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), licensePlate: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), products: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), sku: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), unitValue: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined])}, undefined]), validation: faker.helpers.arrayElement([{isValid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), canPublish: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), errorCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getPatchEventsEventIdResponseMock = (overrideResponse: Partial< EventResponse > = {}): EventResponse => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), eventType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), organizationId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), siteId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['draft','published'] as const), undefined]), metadata: faker.helpers.arrayElement([{title: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement(['low','medium','high','critical'] as const), undefined]), occurredAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), sections: faker.helpers.arrayElement([{persons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['suspect','victim','witness','employee'] as const), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])})), undefined]), vehicles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), make: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), licensePlate: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), products: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), sku: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), unitValue: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined])}, undefined]), validation: faker.helpers.arrayElement([{isValid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), canPublish: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), errorCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getPostEventsEventIdPublishResponseMock = (overrideResponse: Partial< EventResponse > = {}): EventResponse => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), eventType: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), organizationId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), siteId: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['draft','published'] as const), undefined]), metadata: faker.helpers.arrayElement([{title: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), priority: faker.helpers.arrayElement([faker.helpers.arrayElement(['low','medium','high','critical'] as const), undefined]), occurredAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined]), sections: faker.helpers.arrayElement([{persons: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), role: faker.helpers.arrayElement([faker.helpers.arrayElement(['suspect','victim','witness','employee'] as const), undefined]), age: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])})), undefined]), vehicles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), make: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), licensePlate: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), products: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), sku: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), quantity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined]), unitValue: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined])})), undefined])}, undefined]), validation: faker.helpers.arrayElement([{isValid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), canPublish: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), errorCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getPostEventsEventIdValidateResponseMock = (overrideResponse: Partial< ValidationResponse > = {}): ValidationResponse => ({valid: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), canPublish: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issues: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({field: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), message: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), severity: faker.helpers.arrayElement([faker.helpers.arrayElement(['error','warning'] as const), undefined])})), undefined]), ...overrideResponse})


export const getGetEventTypesEventTypeConfigMockHandler = (overrideResponse?: EventTypeConfig | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EventTypeConfig> | EventTypeConfig)) => {
  return http.get('*/event-types/:eventType/config', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetEventTypesEventTypeConfigResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostEventsMockHandler = (overrideResponse?: EventResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EventResponse> | EventResponse)) => {
  return http.post('*/events', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostEventsResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetEventsEventIdMockHandler = (overrideResponse?: EventResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EventResponse> | EventResponse)) => {
  return http.get('*/events/:eventId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetEventsEventIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchEventsEventIdMockHandler = (overrideResponse?: EventResponse | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<EventResponse> | EventResponse)) => {
  return http.patch('*/events/:eventId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPatchEventsEventIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostEventsEventIdPublishMockHandler = (overrideResponse?: EventResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EventResponse> | EventResponse)) => {
  return http.post('*/events/:eventId/publish', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostEventsEventIdPublishResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostEventsEventIdValidateMockHandler = (overrideResponse?: ValidationResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ValidationResponse> | ValidationResponse)) => {
  return http.post('*/events/:eventId/validate', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostEventsEventIdValidateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getEventFormsAPIMock = () => [
  getGetEventTypesEventTypeConfigMockHandler(),
  getPostEventsMockHandler(),
  getGetEventsEventIdMockHandler(),
  getPatchEventsEventIdMockHandler(),
  getPostEventsEventIdPublishMockHandler(),
  getPostEventsEventIdValidateMockHandler()
]
